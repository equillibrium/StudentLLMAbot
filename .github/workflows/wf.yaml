---
name: Build and push docker image, deploy to k3s
on:
  push:
    branches: [ main, local_api_server ]
  workflow_dispatch:
jobs:
  build:
    name: Build bot docker image
    runs-on: self-hosted
    permissions:
      packages: write
      contents: read

    steps:
      - run: |
          export repo=${{ github.repository }}
          PROJECT=$(echo "${repo#*/}" | tr '[:upper:]' '[:lower:]')
          
          IMAGE=ghcr.io/${{ github.actor }}/$PROJECT
          
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          
          echo "$PROJECT","$IMAGE"

      - uses: actions/checkout@v4

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: 'true'
          cache-from: type=registry,ref=${{ env.IMAGE }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE }}:cache,mode=max
          tags: ${{ env.IMAGE }}:latest,${{ env.IMAGE }}:cache

  deploy:
    name: Deploy to MacBook Pro Docker Desktop k8s
    runs-on: self-hosted
    needs: build

    steps:
      - run: |
          export repo=${{ github.repository }}
          PROJECT=$(echo "${repo#*/}" | tr '[:upper:]' '[:lower:]')

          IMAGE=ghcr.io/${{ github.actor }}/$PROJECT

          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

          echo "$PROJECT","$IMAGE"

      # - uses: tale/kubectl-action@v1
      #   with:
      #     base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - run: kubectl create namespace $PROJECT || true

      - run: |
          kubectl create secret docker-registry ghcr \
            -n "$PROJECT" \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.REGISTRY_PAT }} \
            --docker-email=kotobars@gmail.com \
            --dry-run=client -o=yaml | kubectl apply -n $PROJECT -f -

      - name: Create env secret
        env:
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE }}
        run: |
          echo "$ENV_FILE_CONTENT" > env_file
          kubectl create secret generic "$PROJECT" \
            -n "$PROJECT" \
            --from-env-file=env_file \
            --dry-run=client -o=yaml | kubectl apply -n "$PROJECT" -f -

      - run: |
          kubectl create serviceaccount "$PROJECT" -n "$PROJECT" \
            --dry-run=client -o=yaml | kubectl apply -n $PROJECT -f -
          kubectl patch serviceaccount "$PROJECT" -n "$PROJECT" \
            -p '{"imagePullSecrets": [{"name": "ghcr"}]}' \
            --dry-run=client -o=yaml | kubectl apply -n $PROJECT -f -
          

      - uses: actions/checkout@v4

      - name: Kubectl apply deployment
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # sudo apt-get update -qq && sudo apt-get install -q -y gettext
          helm upgrade --install redis-k8s oci://registry-1.docker.io/bitnamicharts/redis \
            --set=architecture=standalone \
            --set=auth.enabled=false
          cat k8s/* | envsubst | kubectl apply -n $PROJECT -f -
